Cloudflare KV を共通のデータストレージとして、複数のアプリケーションが利用できる **API（Key-Value Storage API）** を作る場合、以下の要件を満たすと便利です。

1. **統一されたエンドポイント**（アプリごとに異なるデータ型でも統一的に扱える）
2. **アプリごとのデータ分離**（名前空間・プレフィックス管理）
3. **JSON 形式のデータ保存・取得**
4. **圧縮オプション（サイズ削減）**
5. **認証（APIキー or JWT）**

---

Cloudflare Workers API

create KV namespace store0

wrangler kv namespace create store0
	> namespace id  

kv for development (use on wrangler dev)
wrangler kv namespace create store0 --preview
	> preview id



cloudflare worker API

index.js
---
`cors()` はクロスオリジンアクセス（他ドメインからのAPI呼び出し）を許可。

```js
import { Hono } from 'hono'
import { cors } from 'hono/cors'

const app = new Hono()

app.use('*', cors({
  origin: '*',
  allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowHeaders: ['Content-Type']
}))
```

## POST `/kv/set`  
キーにデータを保存します。

```ts
app.post('/kv/set', async (c) => {
  const { app: appName, key, value } = await c.req.json()
  if (!appName || !key || !value) {
    return c.text('Missing app, key, or value', 400)
  }
  const env = c.env
  await env.store0.put(`${appName}:${key}`, JSON.stringify(value))
  return c.json({ success: true })
})
```

### ポイント
- `appName` を使ってキーを名前空間化（例: `todo:task1`）。
- `value` はJSON文字列にして保存。
- 値が `undefined`だと保存できないため、条件式は `value === undefined` などに改善可能。

---

## GET `/kv/get/:app/:key`  
保存されたデータを取得。

```js
app.get('/kv/get/:app/:key', async (c) => {
  const { app: appName, key } = c.req.param()
  const env = c.env
  const value = await env.store0.get(`${appName}:${key}`)
  if (!value) {
    return c.text('Not Found', 404)
  }
  return c.text(value)
})
```

### ポイント
- `appName:key` の形式で取得。
- 値が見つからない場合は 404 エラー。

---

## DELETE `/kv/delete/:app/:key`  
キーを削除。

```js
app.delete('/kv/delete/:app/:key', async (c) => {
  const { app: appName, key } = c.req.param()
  const env = c.env
  await env.store0.delete(`${appName}:${key}`)
  return c.json({ success: true })
})
```

### ポイント
- 指定されたキーを即座に削除。

---

## GET `/kv/list/:app`  
アプリに属するすべてのキー名を一覧表示。

```js
app.get('/kv/list/:app', async (c) => {
  const { app: appName } = c.req.param()
  const env = c.env
  const list = await env.store0.list({ prefix: `${appName}:` })
  const keys = list.keys.map((k) => k.name.replace(`${appName}:`, ''))
  return c.json(keys)
})
```

### ポイント
- `prefix` によってそのアプリのキーのみ取得。
- `appName:` を除去してクリーンなキー一覧に変換。

---

## 全アプリのデータを一覧取得する

```js
// GET /kv/list-all
app.get('/kv/list-all', async (c) => {
  const env = c.env
  // Fetch all keys from Cloudflare KV storage
  const list = await env.store0.list()
  
  // Extract key names from the result and classify them by app name
  const keys = list.keys.map((k) => {
    const [appName, key] = k.name.split(':')  // Split the key into app name and actual key
    return { appName, key }
  })

  // Group the keys by app name
  const groupedByApp = keys.reduce((acc, { appName, key }) => {
    if (!acc[appName]) acc[appName] = []  // Initialize an empty array if app name does not exist
    acc[appName].push(key)  // Add the key under the corresponding app name
    return acc
  }, {})

  // Return the grouped keys in JSON format
  return c.json(groupedByApp)
})
```

1. **`list()`メソッドの変更**:  
   `list()` メソッドに `prefix` を指定しないことで、すべてのアプリケーションに関連するキーを取得します。
   
2. **キーの整形**:  
   キー名（`appName:key`）を分割して、アプリ名（`appName`）とキー（`key`）に分けます。
   
3. **グループ化**:  
   `reduce` メソッドを使用して、アプリごとにキーをまとめます。

各アプリ名をキーに、そのアプリに関連するすべてのキーがリストされます。



複数のキーと値を一括で登録

```js
// POST /kv/set-multiple
app.post('/kv/set-multiple', async (c) => {
  const { app: appName, items } = await c.req.json()
  if (!appName || !Array.isArray(items)) {
    return c.text('Missing app or items (must be array)', 400)
  }

  const env = c.env
  const results = []

  for (const item of items) {
    const { key, value } = item
    if (!key || typeof value === 'undefined') {
      results.push({ key, success: false, error: 'Missing key or value' })
      continue
    }

    try {
      await env.store0.put(`${appName}:${key}`, JSON.stringify(value))
      results.push({ key, success: true })
    } catch (err) {
      results.push({ key, success: false, error: err.message })
    }
  }

  return c.json({ success: true, results })
})

export default app;
```


APIの動作確認

wrangler dev


curl -X POST "http://localhost:8787/kv/set" \
  -H "Content-Type: application/json" \
  -d '{"app": "app1", "key": "task1", "value": {"task": "Buy milk", "dueDate": "2025-05-01", "completed": false}}'

curl -X GET "http://localhost:8787/kv/get/app1/task1"

curl -X POST "http://localhost:8787/kv/set" \
  -H "Content-Type: application/json" \
  -d '{"app": "app1", "key": "task2", "value": {"task": "Clean the house", "dueDate": "2025-05-10", "completed": false}}'

curl -X POST "http://localhost:8787/kv/set" \
  -H "Content-Type: application/json" \
  -d '{"app": "app1", "key": "task3", "value": {"task": "Complete homework", "dueDate": "2025-05-05", "priority": "High", "completed": false}}'

curl -X GET "http://localhost:8787/kv/list/app1"

curl -X POST "http://localhost:8787/kv/set" \
  -H "Content-Type: application/json" \
  -d '{"app": "app2", "key": "user1", "value": {"name": "John Doe", "email": "john.doe@example.com", "age": 30}}'

curl -X GET "http://localhost:8787/kv/get/app2/user1"

curl -X POST "http://localhost:8787/kv/set" \
  -H "Content-Type: application/json" \
  -d '{"app": "app2", "key": "user2", "value": {"name": "Jane Smith", "email": "jane.smith@example.com", "age": 28}}'

curl -X POST "http://localhost:8787/kv/set" \
  -H "Content-Type: application/json" \
  -d '{"app": "app2", "key": "user3", "value": {"name": "Alice Johnson", "email": "alice.johnson@example.com", "age": 35, "phone": "+1-800-123-4567"}}'

curl -X GET "http://localhost:8787/kv/list/app2"

curl -X POST http://localhost:8787/kv/set-multiple \
  -H "Content-Type: application/json" \
  -d '{"app": "app2",
    "items": [
      {"key": "user4",
       "value": { "name": "John Doe2", "email": "john.doe2@example.com", "age": 25 }},
      {"key": "user5",
        "value": { "name": "John Doe3", "email": "john.doe3@example.com", "age": 20 }}
    ]
  }'

curl -X GET "http://localhost:8787/kv/list-all"


wranger deploy


---









認証と認可、バルク操作、TTL付きデータ保存、検索機能、データ更新のサポート、データのバックアップと復元を加えたAPIのコードを作成しました。

```javascript
export default {
  async fetch(req, env) {
    const url = new URL(req.url);
    const { method } = req;

    // CORS Middleware
    const withCors = (res) => {
      res.headers.set('Access-Control-Allow-Origin', '*');
      res.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
      res.headers.set('Access-Control-Allow-Headers', 'Content-Type');
      return res;
    };

    // 認証と認可
    const authenticate = (req) => {
      const authHeader = req.headers.get('Authorization');
      if (!authHeader || authHeader !== 'Bearer YOUR_API_KEY') {
        return new Response('Unauthorized', { status: 401 });
      }
      return null; // 認証が成功した場合はnullを返す
    };

    // Preflight req Handling (OPTIONS method)
    if (method === 'OPTIONS') {
      return withCors(new Response(null, { status: 204 }));
    }

    // バルク操作 (POST /kv/bulk-set)
    if (url.pathname === '/kv/bulk-set' && method === 'POST') {
      const authError = authenticate(req);
      if (authError) return authError;

      try {
        const { items } = await req.json();
        if (!Array.isArray(items)) return withCors(new Response('Items must be an array', { status: 400 }));

        for (const { app, key, value, ttl } of items) {
          if (!app || !key || value === undefined) {
            return withCors(new Response('Missing app, key, or value', { status: 400 }));
          }

          const options = ttl ? { expirationTtl: ttl } : {};
          await env.store0.put(`${app}:${key}`, JSON.stringify(value), options);
        }

        return withCors(new Response(JSON.stringify({ success: true }), { status: 200 }));
      } catch (error) {
        return withCors(new Response(error.toString(), { status: 500 }));
      }
    }

    // TTL付きデータ保存 (POST /kv/set)
    if (url.pathname === '/kv/set' && method === 'POST') {
      const authError = authenticate(req);
      if (authError) return authError;

      try {
        const { app, key, value, ttl } = await req.json();
        if (!app || !key || value === undefined) {
          return withCors(new Response('Missing app, key, or value', { status: 400 }));
        }

        const options = ttl ? { expirationTtl: ttl } : {};
        await env.store0.put(`${app}:${key}`, JSON.stringify(value), options);

        return withCors(new Response(JSON.stringify({ success: true }), { status: 200 }));
      } catch (error) {
        return withCors(new Response(error.toString(), { status: 500 }));
      }
    }

    // 検索機能 (GET /kv/list/:app)
    if (url.pathname.startsWith('/kv/list/') && method === 'GET') {
      const authError = authenticate(req);
      if (authError) return authError;

      const [, , , app] = url.pathname.split('/');
      if (!app) return withCors(new Response('Missing app', { status: 400 }));

      try {
        const list = await env.store0.list({ prefix: `${app}:` });
        const keys = list.keys.map((k) => k.name.replace(`${app}:`, ''));
        return withCors(new Response(JSON.stringify(keys), { status: 200 }));
      } catch (error) {
        return withCors(new Response('Error listing data', { status: 500 }));
      }
    }

    // データ更新のサポート (PUT /kv/update)
    if (url.pathname === '/kv/update' && method === 'PUT') {
      const authError = authenticate(req);
      if (authError) return authError;

      try {
        const { app, key, newValue } = await req.json();
        if (!app || !key || newValue === undefined) {
          return withCors(new Response('Missing app, key, or new value', { status: 400 }));
        }

        const oldValue = await env.store0.get(`${app}:${key}`);
        if (!oldValue) return withCors(new Response('Key not found', { status: 404 }));

        await env.store0.put(`${app}:${key}`, JSON.stringify(newValue));
        return withCors(new Response(JSON.stringify({ success: true }), { status: 200 }));
      } catch (error) {
        return withCors(new Response('Error updating data', { status: 500 }));
      }
    }

    // データのバックアップと復元 (GET /kv/backup, POST /kv/restore)
    if (url.pathname === '/kv/backup' && method === 'GET') {
      const authError = authenticate(req);
      if (authError) return authError;

      try {
        const list = await env.store0.list({});
        const backupData = await Promise.all(
          list.keys.map(async (k) => {
            const value = await env.store0.get(k.name);
            return { key: k.name, value: JSON.parse(value) };
          })
        );
        return withCors(new Response(JSON.stringify(backupData), { status: 200 }));
      } catch (error) {
        return withCors(new Response('Error backing up data', { status: 500 }));
      }
    }

    if (url.pathname === '/kv/restore' && method === 'POST') {
      const authError = authenticate(req);
      if (authError) return authError;

      try {
        const { backupData } = await req.json();
        if (!Array.isArray(backupData)) return withCors(new Response('Backup data must be an array', { status: 400 }));

        for (const { key, value } of backupData) {
          if (!key || value === undefined) {
            return withCors(new Response('Invalid backup data format', { status: 400 }));
          }
          await env.store0.put(key, JSON.stringify(value));
        }

        return withCors(new Response(JSON.stringify({ success: true }), { status: 200 }));
      } catch (error) {
        return withCors(new Response('Error restoring data', { status: 500 }));
      }
    }

    // 404 Not Found
    return withCors(new Response('Not Found', { status: 404 }));
  },
};
```

### 機能の詳細：
1. **認証と認可**:
   - `authenticate`関数で、`Authorization`ヘッダーに含まれるAPIキーを確認します。
   - `Bearer YOUR_API_KEY`が正しい場合のみリクエストを受け入れます。

`Bearer YOUR_API_KEY` は、APIリクエストのヘッダーに認証情報として追加する文字列です。この形式は、**Bearerトークン認証**と呼ばれ、APIアクセスのセキュリティを確保するためによく使用されます。

具体的には、`YOUR_API_KEY` をあなたが設定したAPIキーに置き換えます。このAPIキーは、APIの利用を許可されたユーザーやアプリケーションに割り当てられたもので、リクエストが許可されたものかを判定するために使われます。

例えば、もしAPIキーが `1234567890abcdef` であれば、認証ヘッダーは次のようになります：

```bash
Authorization: Bearer 1234567890abcdef
```

この`Authorization` ヘッダーは、APIサーバーにリクエストが送られる際に、リクエストが認証されたものであるかどうかを判断するために使用されます。APIキーが無効、または指定されていない場合、サーバーは `401 Unauthorized` エラーを返します。

`YOUR_API_KEY` という部分は、実際に自分が設定したAPIキーに置き換えてください。
if (!authHeader || authHeader !== 'Bearer 1234567890abcdef')



2. **バルク操作** (`POST /kv/bulk-set`):
   - 複数のデータを一度に保存します。リクエストボディには`items`という配列で複数のキーと値を指定できます。
   - 各アイテムにはオプションで`ttl`（有効期限）を設定できます。

3. **TTL付きデータ保存** (`POST /kv/set`):
   - 通常の`set`操作ですが、`ttl`オプションを指定することでデータの有効期限を設定できます。

4. **検索機能** (`GET /kv/list/:app`):
   - 指定したアプリ名で始まるキーをリスト化します。

5. **データ更新のサポート** (`PUT /kv/update`):
   - 既存のキーの値を更新します。指定したキーが存在しない場合は404エラーを返します。

6. **データのバックアップと復元**:
   - `GET /kv/backup`: 現在のすべてのキーとその値をバックアップします。
   - `POST /kv/restore`: バックアップデータを復元します。



以下は、各機能を確認するための `curl` コマンドです。`YOUR_API_KEY` は実際に使用するAPIキーに置き換えてください。

---

wrangler dev

### 1. **認証と認可**

認証を通過するためには、`Authorization` ヘッダーに `Bearer YOUR_API_KEY` を追加します。

```bash
curl -X GET http://localhost:8787/kv/list/app1 \
-H "Authorization: Bearer YOUR_API_KEY"
```

---

### 2. **バルク操作 (POST /kv/bulk-set)**

複数のデータを一度に保存するには、以下のように`curl`を使います。

```bash
curl -X POST http://localhost:8787/kv/bulk-set \
-H "Content-Type: application/json" \
-H "Authorization: Bearer YOUR_API_KEY" \
-d '{
  "items": [
    { "app": "app1", "key": "key11", "value": "value11", "ttl": 3600 },
    { "app": "app2", "key": "key21", "value": "value21" }
  ]
}'
```

---

### 3. **TTL付きデータ保存 (POST /kv/set)**

`ttl` オプション付きでデータを保存します。

```bash
curl -X POST http://localhost:8787/kv/set \
-H "Content-Type: application/json" \
-H "Authorization: Bearer YOUR_API_KEY" \
-d '{
  "app": "app1",
  "key": "key13",
  "value": "value13",
  "ttl": 3600
}'
```

---

### 4. **検索機能 (GET /kv/list/:app)**

指定されたアプリに関連するキーのリストを取得します。

```bash
curl -X GET http://localhost:8787/kv/list/app1 \
-H "Authorization: Bearer YOUR_API_KEY"
```

---

### 5. **データ更新のサポート (PUT /kv/update)**

既存のデータを更新します。指定したキーが存在しない場合は404エラーが返されます。

```bash
curl -X PUT http://localhost:8787/kv/update \
-H "Content-Type: application/json" \
-H "Authorization: Bearer YOUR_API_KEY" \
-d '{
  "app": "app1",
  "key": "key11",
  "newValue": "updated_value"
}'
```

---

### 6. **データのバックアップ (GET /kv/backup)**

現在のすべてのキーとその値をバックアップします。

```bash
curl -X GET "http://localhost:8787/kv/backup" \
-H "Authorization: Bearer YOUR_API_KEY"
```

---

### 7. **データの復元 (POST /kv/restore)**

バックアップデータを復元します。バックアップデータはJSON形式で渡します。

```bash
curl -X POST "http://localhost:8787/kv/restore" \
-H "Content-Type: application/json" \
-H "Authorization: Bearer YOUR_API_KEY" \
-d '{
  "backupData": [
    { "key": "someapp:key1", "value": "restored_value1" },
    { "key": "someapp:key2", "value": "restored_value2" }
  ]
}'
```

---

- **`-X`**: 使用するHTTPメソッド（GET、POST、PUTなど）を指定します。
- **`-H`**: HTTPヘッダーを指定します。`Authorization` ヘッダーで認証情報を渡します。
- **`-d`**: リクエストボディとして送信するデータを指定します（POST、PUTリクエスト用）。







