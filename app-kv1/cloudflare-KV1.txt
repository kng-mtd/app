Cloudflare KV を共通のデータストレージとして、複数のアプリケーションが利用できる **API（Key-Value Storage API）** を作る場合、以下の要件を満たすと便利です。

### **要件**
1. **統一されたエンドポイント**（アプリごとに異なるデータ型でも統一的に扱える）
2. **アプリごとのデータ分離**（名前空間・プレフィックス管理）
3. **JSON 形式のデータ保存・取得**
4. **圧縮オプション（サイズ削減）**
5. **認証（APIキー or JWT）**

---

## **1. Cloudflare Workers で API を構築**
Cloudflare Workers を使って、Cloudflare KV (ex. store0) にアクセスする API を作成します。

### **エンドポイント設計**
| メソッド | エンドポイント | 内容 |
|----------|--------------|------|
| `POST`   | `/kv/set`    | データを保存 |
| `GET`    | `/kv/get`    | データを取得 |
| `DELETE` | `/kv/delete` | データを削除 |
| `PUT`    | `/kv/set`    | データを更新 |
| `GET`    | `/kv/list/app0`   | キーのリストを取得 |

---


index.js

export default {
	async fetch(req, env) {
		const url = new URL(req.url);
		const { method } = req;

		// CORS Middleware
		const withCors = (res) => {
			res.headers.set('Access-Control-Allow-Origin', '*');
			res.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
			res.headers.set('Access-Control-Allow-Headers', 'Content-Type');
			return res;
		};

		// Preflight req Handling (OPTIONS method)
		if (method === 'OPTIONS') {
			return withCors(new Response(null, { status: 204 }));
		}

		// Handle POST /kv/set
		if (url.pathname === '/kv/set' && method === 'POST') {
			try {
				const { app, key, value } = await req.json();
				if (!app || !key || !value) return withCors(new Response('Missing app, key, or value', { status: 400 }));

				await env.store0.put(`${app}:${key}`, JSON.stringify(value)); // Namespaced Key
				return withCors(new Response(JSON.stringify({ success: true }), { status: 200 }));
			} catch (error) {
				return withCors(new Response(error.toString(), { status: 500 }));
			}
		}

		// Handle GET /kv/get/:app/:key
		if (url.pathname.startsWith('/kv/get/') && method === 'GET') {
			const [, , , app, key] = url.pathname.split('/');
			if (!app || !key) return withCors(new Response('Missing app or key', { status: 400 }));

			const value = await env.store0.get(`${app}:${key}`);
			return value ? withCors(new Response(value)) : withCors(new Response('Not Found', { status: 404 }));
		}

		// Handle DELETE /kv/delete/:app/:key
		if (url.pathname.startsWith('/kv/delete/') && method === 'DELETE') {
			const [, , , app, key] = url.pathname.split('/');
			if (!app || !key) return withCors(new Response('Missing app or key', { status: 400 }));

			await env.store0.delete(`${app}:${key}`);
			return withCors(new Response(JSON.stringify({ success: true }), { status: 200 }));
		}

		// Handle GET /kv/list/:app
		if (url.pathname.startsWith('/kv/list/') && method === 'GET') {
			const [, , , app] = url.pathname.split('/');
			if (!app) return withCors(new Response('Missing app', { status: 400 }));

			const list = await env.store0.list({ prefix: `${app}:` });
			const keys = list.keys.map((k) => k.name.replace(`${app}:`, ''));
			return withCors(new Response(JSON.stringify(keys), { status: 200 }));
		}

		// 404 Not Found
		return withCors(new Response('Not Found', { status: 404 }));
	},
};





APIの動作確認

npx wrangler dev

curl -X GET http://localhost:8787/kv/get/app1/message

curl -X POST http://localhost:8787/kv/set \
  -H "Content-Type: application/json" \
  -d '{"app": "app1", "key": "message1", "value": "Hello from app1-1"}'

curl -X POST http://localhost:8787/kv/set \
  -H "Content-Type: application/json" \
  -d '{"app": "app1", "key": "message2", "value": "Hello from app1-2"}'

curl -X GET http://localhost:8787/kv/get/app1/message1
curl -X GET http://localhost:8787/kv/get/app1/message2

curl -X POST http://localhost:8787/kv/set \
  -H "Content-Type: application/json" \
  -d '{"app": "app2", "key": "message1", "value": "Hello from app2-1"}'

curl -X GET http://localhost:8787/kv/get/app1/message2

curl -X GET http://localhost:8787/kv/list/app1

curl -X PUT http://localhost:8787/kv/set \
  -H "Content-Type: application/json" \
  -d '{"app": "app1", "key": "message1", "value": "Updated message from app1-1"}'

curl -X GET http://localhost:8787/kv/get/app1/message1

curl -X DELETE http://localhost:8787/kv/delete/app1/message2

curl http://localhost:8787/kv/get/app1/message2

curl -X GET http://localhost:8787/kv/list/app1


npx wranger deploy


---


### **クライアントから Cloudflare Workers API を使う方法**  
フロントエンドの JavaScript から API を使って Cloudflare KV にデータを保存・取得・更新・削除する方法を解説します。

---

## **📌 1. API エンドポイントの仕様**
まず、Cloudflare Workers API のエンドポイントを確認します。

| **HTTP メソッド** | **エンドポイント**       | **説明** |
|-----------------|--------------------|------------|
| `POST`         | `/kv/set`           | データの保存・更新 |
| `GET`          | `/kv/get/{app}/{key}` | データの取得 |
| `DELETE`       | `/kv/delete/{app}/{key}` | データの削除 |
| `GET`          | `/kv/list/{app}`    | アプリごとのキー一覧取得 |

> **API のベース URL**
> - **ローカル開発環境:** `http://localhost:8787`
> - **デプロイ後:** `https://your-cloudflare-worker-url.com`

---

## **📌 2. クライアント側の JavaScript コード**
以下の JavaScript 関数を使って API を呼び出せます。

### **🔹 データを保存**
```javascript
async function saveData(app, key, value) {
    const response = await fetch("http://localhost:8787/kv/set", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ app, key, value })
    });
    return response.json();
}

// 例: "app1" の "message" キーにデータを保存
saveData("app1", "message", "Hello, Cloudflare!").then(console.log);
```

✅ **期待されるレスポンス**
```json
{"success": true}
```

---

### **🔹 データを取得**
```javascript
async function getData(app, key) {
    const response = await fetch(`http://localhost:8787/kv/get/${app}/${key}`);
    if (!response.ok) throw new Error("Data not found");
    return response.text();
}

// 例: "app1" の "message" を取得
getData("app1", "message").then(console.log).catch(console.error);
```

✅ **期待されるレスポンス**
```json
"Hello, Cloudflare!"
```

---

### **🔹 データを更新**
データ保存 (`/kv/set`) と同じ API を使うので、`saveData()` を呼び出せば OK。

```javascript
saveData("app1", "message", "Updated message").then(console.log);
```

✅ **期待されるレスポンス**
```json
{"success": true}
```

---

### **🔹 データを削除**
```javascript
async function deleteData(app, key) {
    const response = await fetch(`http://localhost:8787/kv/delete/${app}/${key}`, {
        method: "DELETE"
    });
    return response.json();
}

// 例: "app1" の "message" を削除
deleteData("app1", "message").then(console.log);
```

✅ **期待されるレスポンス**
```json
{"success": true}
```

---

### **🔹 アプリごとのキー一覧を取得**
```javascript
async function listKeys(app) {
    const response = await fetch(`http://localhost:8787/kv/list/${app}`);
    return response.json();
}

// 例: "app1" のキー一覧を取得
listKeys("app1").then(console.log);
```

✅ **期待されるレスポンス**
```json
["message", "anotherKey"]
```

---

## **📌 3. クライアントアプリの組み込み例**
例えば、HTML のフォームと連携して API を使う例:

```html
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cloudflare KV API Demo</title>
</head>
<body>
    <h1>Cloudflare KV API Demo</h1>

    <input type="text" id="key" placeholder="Key">
    <input type="text" id="value" placeholder="Value">
    <button onclick="save()">Save</button>
    <button onclick="load()">Load</button>

    <p id="result"></p>

    <script>
        const app = "app1"; // 固定のアプリ名

        async function save() {
            const key = document.getElementById("key").value;
            const value = document.getElementById("value").value;
            const res = await saveData(app, key, value);
            document.getElementById("result").innerText = JSON.stringify(res);
        }

        async function load() {
            const key = document.getElementById("key").value;
            try {
                const value = await getData(app, key);
                document.getElementById("result").innerText = value;
            } catch (e) {
                document.getElementById("result").innerText = "Not Found";
            }
        }
    </script>
</body>
</html>
```


| **操作** | **関数** | **API** |
|---------|---------|--------|
| データ保存 | `saveData(app, key, value)` | `POST /kv/set` |
| データ取得 | `getData(app, key)` | `GET /kv/get/{app}/{key}` |
| データ更新 | `saveData(app, key, value)` | `POST /kv/set` |
| データ削除 | `deleteData(app, key)` | `DELETE /kv/delete/{app}/{key}` |
| キー一覧取得 | `listKeys(app)` | `GET /kv/list/{app}` |

---






`pako` は zlib の圧縮・解凍を行う JavaScript ライブラリです。Cloudflare Workers でも `gzip`/`ungzip` を扱うのに便利です。  

## **`pako` をインストール**
もしローカル開発環境で使う場合は、以下のコマンドでインストールできます。

```sh
npm install pako
```

## **gzip 圧縮して Cloudflare KV に保存**
Cloudflare KV は **最大25MBのデータ** を保存できるため、大きな JSON データなどを圧縮するとストレージと転送量を節約できます。

```javascript
import { gzip } from 'pako';

const data = { type: "log", messages: ["ログ1", "ログ2", "ログ3"] };
const compressed = gzip(JSON.stringify(data));

// Cloudflare KV に保存
await env.KV_NAMESPACE.put("logs:001", compressed, { expirationTtl: 86400 });
```

`expirationTtl: 86400` は **24時間後にデータを自動削除** するオプションです（不要なら省略）。

---

## **Cloudflare KV から取り出して解凍**
保存したデータを取り出し、解凍して元の JSON に戻します。

```javascript
import { ungzip } from 'pako';

const compressedData = await env.KV_NAMESPACE.get("logs:001", { type: "arrayBuffer" });

if (compressedData) {
  const decompressed = JSON.parse(new TextDecoder().decode(ungzip(new Uint8Array(compressedData))));
  console.log(decompressed);  // { type: "log", messages: ["ログ1", "ログ2", "ログ3"] }
}
```

---

## **バイナリデータの扱いに注意**
Cloudflare KV の `put` は **文字列（string）** で保存するのが基本ですが、`Uint8Array` や `ArrayBuffer` も保存可能です。その場合、`get` 時に `{ type: "arrayBuffer" }` を指定しないと、データが文字列として破損する可能性があります。

### **バイナリを Base64 に変換して保存する方法**
もし `arrayBuffer` を使いたくない場合は、Base64 変換する方法もあります。

```javascript
import { gzip } from 'pako';

// Base64エンコード
function encodeBase64(bytes) {
  return btoa(String.fromCharCode(...bytes));
}

// Base64デコード
function decodeBase64(str) {
  return new Uint8Array([...atob(str)].map(c => c.charCodeAt(0)));
}

// データを圧縮して Base64 に変換
const compressedBase64 = encodeBase64(gzip(JSON.stringify(data)));

// KV に保存
await env.KV_NAMESPACE.put("logs:001", compressedBase64);
```

### **取得時に解凍**
```javascript
import { ungzip } from 'pako';

const compressedBase64 = await env.KV_NAMESPACE.get("logs:001");

if (compressedBase64) {
  const decompressed = JSON.parse(new TextDecoder().decode(ungzip(decodeBase64(compressedBase64))));
  console.log(decompressed);
}
```

---

## **どの方法を選ぶべきか？**
| 方法 | 長所 | 短所 |
|------|------|------|
| **通常の JSON 文字列** | そのまま保存できる | 大きなデータはサイズ増加 |
| **gzip 圧縮 + ArrayBuffer** | データサイズを大幅削減 | `arrayBuffer` 指定が必要 |
| **gzip 圧縮 + Base64** | `arrayBuffer` を使わなくて済む | Base64変換で少しサイズ増加 |

圧縮して保存するなら、基本は `gzip + ArrayBuffer` で OK です。Base64 は JSON のみを扱う場合に便利ですが、データサイズは少し増えます。

Cloudflare KV に大量のデータを保存するなら、**gzip 圧縮を活用することでパフォーマンスとコストを改善** できます！ 🚀
