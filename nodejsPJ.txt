https://qiita.com/nouernet/items/d6ad4d5f4f08857644de

sudo apt install -y nodejs npm

sudo npm install n -g

sudo n stable

sudo apt purge -y nodejs npm
sudo apt autoremove -y

node -v
npm -v

mkdir 0pj
cd 0pj

npm init -y

nano index.js

	console.log('Hello, node.js');

node index.js


http server with nodejs default web server

----
const http = require('http');

const server = http.createServer((req, res) => {
  // Handle GET requests
  if (req.method === 'GET') {
    res.statusCode = 200;  // HTTP status code
    res.setHeader('Content-Type', 'text/plain'); // response header
    res.end('Hello, Node.js'); // response body
  }

  // Handle POST requests
  else if (req.method === 'POST') {
    let body = '';

    // Collect POST data
    req.on('data', chunk => {
      body += chunk;
    });

    // Once all POST data is received
    req.on('end', () => {
      res.statusCode = 200;
      res.setHeader('Content-Type', 'text/plain');
      res.end(`Received POST data: ${body}`);
    });
  }

  // Handle other request methods
  else {
    res.statusCode = 405; // Method Not Allowed
    res.setHeader('Content-Type', 'text/plain');
    res.end('Method Not Allowed');
  }
});

const PORT = 8787;
server.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}/`);
});
----

get request
curl http://localhost:8787/

post request
curl -X POST -d "contensts" http://localhost:8787/



http server with express

rm -rf node_modules package-lock.json
npm install express@4 cors
npm install

{
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.21.2",
  }
}

----
const express = require('express');
const app = express();

// Middleware to parse JSON and URL-encoded data (for POST requests)
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Handle GET requests
app.get('/', (req, res) => {
  res.status(200).send('Hello, Express GET request');
});

// Handle POST requests
app.post('/', (req, res) => {
  const data = req.body; // Access the data sent in the POST request
  res.status(200).send(`Received POST data: ${JSON.stringify(data)}`);
});

// Handle unsupported methods
app.all('*', (req, res) => {
  res.status(405).send('Method Not Allowed');
});

const PORT = 8787;
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}/`);
});
----

get request
curl http://localhost:8787/

post request
curl -X POST -H "Content-Type: application/json" -d '{"key0":"val0"}' http://localhost:8787/


correspond to cors
express automatically handles OPTIONS and responds correctly for preflight requests, then it doesn't need to manually code OPTIONS handlers.

npm install cors

----
const express = require('express');
const cors = require('cors');
const app = express();

// Enable CORS for all routes
app.use(cors());

// Middleware to parse JSON and URL-encoded data
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Handle GET requests
app.get('/', (req, res) => {
  res.status(200).send('Hello, Express GET request');
});

// Handle POST requests
app.post('/', (req, res) => {
  res.status(200).send(`Received POST data: ${JSON.stringify(req.body)}`);
});

// Handle unsupported methods
app.all('*', (req, res) => {
  res.status(405).send('Method Not Allowed');
});

const PORT = 8787;
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}/`);
});
----

custom cors

app.use('*', cors({
  origin: 'https://example.com', // Only allow requests from this domain
  methods: ['GET', 'POST'],
  allowedHeaders: ['Content-Type'],
}));



http server with Hono

npm install hono
npm install @hono/node-server

package.json
	add "type": "module",
	
{
  "name": "0pj",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "@hono/node-server": "^1.14.1",
    "cors": "^2.8.5",
    "hono": "^4.7.8"
  }
}

----
import { Hono } from 'hono';
import { serve } from '@hono/node-server'; // Node.js server for Hono

const app = new Hono();

// Handle GET requests
app.get('/', (c) => {
  return c.text('Hello, Hono GET request');
});

// Handle POST requests
app.post('/', async (c) => {
  const body = await c.req.json(); // Parse JSON body
  return c.text(`Received POST data: ${JSON.stringify(body)}`);
});

// Handle unsupported methods
app.all('*', (c) => {
  return c.text('Method Not Allowed', 405);
});

const PORT = 8787;
serve({
  fetch: app.fetch,
  port: PORT,
}, () => {
  console.log(`Server running at http://localhost:${PORT}/`);
});
----

get request
curl http://localhost:8787/

post request
curl -X POST -H "Content-Type: application/json" -d '{"key0":"val0"}' http://localhost:8787/



correspond to cors
Hono automatically handles OPTIONS and responds correctly for preflight requests, then it doesn't need to manually code OPTIONS handlers.

----
import { Hono } from 'hono';
import { serve } from '@hono/node-server';
import { cors } from 'hono/cors'; // Import CORS middleware

const app = new Hono();

// Enable CORS for all routes
app.use('*', cors());

// Handle GET requests
app.get('/', (c) => {
  return c.text('Hello, Hono GET request');
});

// Handle POST requests
app.post('/', async (c) => {
  const body = await c.req.json();
  return c.text(`Received POST data: ${JSON.stringify(body)}`);
});

// Handle unsupported methods
app.all('*', (c) => {
  return c.text('Method Not Allowed', 405);
});

const PORT = 8787;
serve({
  fetch: app.fetch,
  port: PORT,
}, () => {
  console.log(`Server running at http://localhost:${PORT}/`);
});
----

custom cors

// Enable CORS only for GitHub Pages domain
app.use('*', cors({
  origin: 'https://your-username.github.io',
  allowMethods: ['GET', 'POST'],
  allowHeaders: ['Content-Type'],
}));


// Enable CORS for GitHub Pages domain and local development
app.use('*', cors({
  origin: (origin) => {
    const allowed = [
      'http://localhost:8787',
      'https://your-username.github.io'
    ];
    return allowed.includes(origin) ? origin : '';
  },
  allowMethods: ['GET', 'POST'],
  allowHeaders: ['Content-Type'],
}));


----
----


Hono for cloudflare worker

npm install -g wrangler
npm update -g wrangler
wrangler --version
wrangler login

mkdir 1pj
wrangler init 1pj
cd 1pj

npm install hono

src/index.js
----
import { Hono } from 'hono';
import { cors } from 'hono/cors'; // Import CORS middleware

const app = new Hono();

// Enable CORS for all routes
app.use('*', cors());

// Handle GET request
app.get('/', (c) => {
	return c.text('Hello, Hono with CORS on Workers');
});

// Handle POST request
app.post('/', async (c) => {
	const data = await c.req.json();
	return c.json({
		comment: 'Received data',
		data,
	});
});

// Handle other methods
app.all('*', (c) => {
	return c.text('Method Not Allowed', 405);
});

// Export Worker fetch
export default app;
----

wrangler dev (wrangler dev src/index0.js)
	 > start developmnet server, x to stop server

curl http://localhost:8787/

curl -X POST http://localhost:8787/ \
  -H "Content-Type: application/json" \
  -d '{"key0":"val0"}'


wrangler deploy

curl https://1pj.muchagorou112.workers.dev

curl -X POST https://1pj.muchagorou112.workers.dev \
  -H "Content-Type: application/json" \
  -d '{"key0":"val0"}'


----
----

CRUD to KV

use kv namespace store1
(or on cloudfare dashboard KV)

wrangler kv namespace create store1
	> namespace id  

kv for development (use on wrangler dev)
wrangler kv namespace create store1 --preview
	> preview id


wrangler.jsonc
----
{
  // Project name
  "name": "1pj",

  // Workers platform compatibility date
  "compatibility_date": "2025-04-01",

  // KV namespace binding
  "kv_namespaces": [
    {
      "binding": "store1", // Available in code as c.env.store0
      "id": "<namespace id>",
      "preview_id": "<dev namespace id>"
    }
  ]
}
----


wrangler kv namespace list
	> namespace id

wrangler kv namespace delete --namespace-id=<namespace id>

wrangler kv key list --namespace-id=<namespace id> --remote
	> key name

wrangler kv key get --namespace-id=<namespace id> <key name> --remote

wrangler kv key put --namespace-id=<namespace id> <key name> <value> --remote




Cloudflare KV API
### `await store0.get(key[, options])`

```js
const value = await store0.get("user:123");
const valueJson = await store0.get("user:123", { type: "json" }); // 自動JSONパース
```

- `type`: `"text"`（デフォルト）、`"json"`、`"arrayBuffer"`、`"stream"`

---

### `await store0.put(key, value[, options])`

```js
await store0.put("user:123", JSON.stringify({ name: "Bob" }));

// TTLをつける（60秒）
await store0.put("temp-key", "value", { expirationTtl: 60 });

// 絶対期限（Unix timestampで指定）
await store0.put("expire-key", "value", { expiration: Math.floor(Date.now() / 1000) + 3600 });
```

---

### `await store0.delete(key)`

```js
await store0.delete("user:123");
```

---

### `await store0.list([options])`

```js
const list = await store0.list({ prefix: "user:" });
for (const entry of list.keys) {
  console.log(entry.name); // キー名
}
```

- オプション:
  - `prefix`: 文字列でフィルタ
  - `limit`: 最大件数（デフォルト1000）
  - `cursor`: 次ページ取得用

---





Hono の主な機能一覧

1. **ルーティング機能**
- `app.get(path, handler)`
- `app.post(path, handler)`
- `app.put(path, handler)`
- `app.delete(path, handler)`
- `app.route(basePath, subApp)` ← ルーティングのグループ化
- `app.on(method, path, handler)` ← 任意メソッド対応

```js
app.get("/hello", c => c.text("Hello"));
```

---

2. **パラメータ付きルーティング**
```js
app.get("/user/:id", c => {
  const id = c.req.param("id");
  return c.text(`User ID: ${id}`);
});
```

---

3. **リクエストパース**
- `c.req.json()`（JSONボディ）
- `c.req.text()`（テキストボディ）
- `c.req.formData()`（multipart/form-data）
- `c.req.query()`（クエリパラメータ）

```js
const data = await c.req.json();
```

---

4. **レスポンスメソッド**
- `c.text("Hello")`
- `c.json({})`
- `c.html("<p>Hi</p>")`
- `c.redirect("/new")`
- `c.body(buffer, status, headers)`

---

5. **ミドルウェア**
```js
app.use("*", async (c, next) => {
  console.log("Request received");
  await next();
});
```
はい、Hono には **便利な組み込みミドルウェア** が多数用意されています。以下に代表的なものを一覧で紹介します。

---

## 🧩 組み込みミドルウェア一覧（Hono公式）

| ミドルウェア名     | 概要                                                            |
|---------------------|-----------------------------------------------------------------|
| `cors()`            | CORS（クロスオリジン）対応                                      |
| `logger()`          | リクエストログ出力                                             |
| `basicAuth()`       | ベーシック認証                                                 |
| `poweredBy()`       | `X-Powered-By` ヘッダーを付与                                   |
| `secureHeaders()`   | セキュリティ関連ヘッダー追加（Helmet相当）                    |
| `etag()`            | ETag ヘッダーでレスポンスのキャッシュ最適化                   |
| `compress()`        | Gzip/Brotli 圧縮（Cloudflare Workersでは無効）                 |
| `csrf()`            | CSRFトークンチェック                                           |
| `cookie()`          | Cookie パーサー（読み書き可能）                                |
| `rateLimit()`       | IPベースのレートリミッター                                     |
| `validator()`       | リクエストバリデーション（zod や yup と組み合わせ）           |


### 1. CORS（全許可）

```js
import { cors } from 'hono/cors';
app.use('*', cors());
```

---

### 2. ロガー

```js
import { logger } from 'hono/logger';
app.use('*', logger());
```

---

### 3. ベーシック認証

```js
import { basicAuth } from 'hono/basic-auth';

app.use('/admin/*', basicAuth({
  username: 'admin',
  password: 'secret'
}));
```

---

### 4. セキュリティヘッダー

```js
import { secureHeaders } from 'hono/secure-headers';
app.use('*', secureHeaders());
```

---

### 5. Cookie の読み書き

```js
import { cookie } from 'hono/cookie';
app.use('*', cookie());

app.get('/cookie', c => {
  const userId = c.req.cookie('user_id');
  return c.text(`Cookie: ${userId}`);
});
```

---

### 6. レート制限（例: 1分に100回）

```js
import { rateLimit } from 'hono/rate-limit';

app.use('/api/*', rateLimit({
  windowMs: 60000,
  limit: 100,
  standardHeaders: true,
}));
```


---

6. **Context (`c`) オブジェクト**
- `c.req`: リクエスト情報
- `c.env`: `Bindings`（KV, D1 など）
- `c.get()/set()`: 値の共有
- `c.header()/status()/body()`: レスポンス制御

---

7. **Bindings（Cloudflare KV, D1 などとの統合）**　TypeScript
```ts
type Bindings = {
  store0: KVNamespace;
  DB: D1Database;
};

const app = new Hono<{ Bindings: Bindings }>();
```

---

8. **Router 分割 / サブアプリ構成**
```js
const userRoute = new Hono();
userRoute.get("/", ...);
userRoute.get("/:id", ...);
app.route("/users", userRoute);
```

---

9. **Error Handling**
```js
app.onError((err, c) => {
  return c.text("Custom Error: " + err.message, 500);
});
```

---

その他機能

| 機能               | 内容                                    |
|--------------------|-----------------------------------------|
| `serve()`          | Cloudflare Workers や Bun に対応        |
| `c.req.header()`   | ヘッダーの取得                          |
| `c.req.valid()`    | バリデーション（zodなどと併用）         |
| `c.req.cookie()`   | Cookie 操作（`cookie` middleware）       |
| `app.fire()`       | Edge runtime 対応                        |

---





----
import { Hono } from 'hono';
import { cors } from 'hono/cors';

const app = new Hono();

// Enable CORS for all routes
app.use('*', cors());

// Handle GET request to fetch a value by key
app.get('/item/:key', async (c) => {
  const key = c.req.param('key');
  const value = await c.env.store1.get(key);
  if (value === null) {
    return c.text('Not Found', 404);
  }
  return c.text(value);
});

// Handle POST request to create a new item
app.post('/item/:key', async (c) => {
  const key = c.req.param('key');
  const body = await c.req.text();
  await c.env.store1.put(key, body);
  return c.text('Created', 201);
});

// Handle PUT request to update an existing item
app.put('/item/:key', async (c) => {
  const key = c.req.param('key');
  const body = await c.req.text();
  await c.env.store1.put(key, body);
  return c.text('Updated', 200);
});

// Handle DELETE request to delete an item
app.delete('/item/:key', async (c) => {
  const key = c.req.param('key');
  await c.env.store1.delete(key);
  return c.text('Deleted', 200);
});

export default app;
----


wrangler dev (wrangler dev src/index1.js)

curl http://localhost:8787/item/foo
curl -X POST http://localhost:8787/item/foo -d "Hello World"
curl http://localhost:8787/item/foo
curl -X POST http://localhost:8787/item/foo2 -d "Hello World2"
curl http://localhost:8787/items
curl -X PUT http://localhost:8787/item/foo2 -d "Updated World"
curl http://localhost:8787/items
curl -X DELETE http://localhost:8787/item/foo
curl http://localhost:8787/items



CRUD json to KV

----
import { Hono } from 'hono';
import { cors } from 'hono/cors';

const app = new Hono();

// Enable CORS for all routes
app.use('*', cors());

// Handle GET request to fetch a JSON value by key
app.get('/item/:key', async (c) => {
	const key = c.req.param('key');
	const value = await c.env.store1.get(key);
	if (value === null) {
		return c.json({ message: 'Not Found' }, 404);
	}
	try {
		const jsonValue = JSON.parse(value);
		return c.json(jsonValue);
	} catch (e) {
		return c.json({ message: 'Invalid JSON stored' }, 500);
	}
});

// Handle POST request to create a new JSON item
app.post('/item/:key', async (c) => {
	const key = c.req.param('key');
	const body = await c.req.json();
	await c.env.store1.put(key, JSON.stringify(body));
	return c.json({ message: 'Created' }, 201);
});

// Handle PUT request to update an existing JSON item
app.put('/item/:key', async (c) => {
	const key = c.req.param('key');
	const body = await c.req.json();
	await c.env.store1.put(key, JSON.stringify(body));
	return c.json({ message: 'Updated' }, 200);
});

// Handle DELETE request to delete an item
app.delete('/item/:key', async (c) => {
	const key = c.req.param('key');
	await c.env.store1.delete(key);
	return c.json({ message: 'Deleted' }, 200);
});

export default app;
----

wrangler dev (wrangler dev src/index2.js)

curl http://localhost:8787/item/fruits

curl -X POST http://localhost:8787/item/fruits1 \
  -H "Content-Type: application/json" \
  -d '{"name": "Apple", "price": 100}'

curl http://localhost:8787/item/fruits

curl -X POST http://localhost:8787/item/fruits2 \
  -H "Content-Type: application/json" \
  -d '{"name": "Banana", "price": 150}'

curl http://localhost:8787/items

curl -X PUT http://localhost:8787/item/fruits1 \
  -H "Content-Type: application/json" \
  -d '{"name": "Apple", "price": 120}'

curl http://localhost:8787/items

curl -X DELETE http://localhost:8787/item/fruits2

curl http://localhost:8787/items




---

explanation of index.js

```js
import { Hono } from 'hono';
import { cors } from 'hono/cors';

const app = new Hono();
app.use('*', cors());
```

- **`Hono`** is a small web framework for Cloudflare Workers.
- **`cors()`** enables Cross-Origin Resource Sharing, allowing your API to be called from different origins (e.g., from a browser).

---

### GET `/item/:key`

```js
app.get('/item/:key', async (c) => {
	const key = c.req.param('key');
	const value = await c.env.store1.get(key);
	if (value === null) {
		return c.json({ message: 'Not Found' }, 404);
	}
	try {
		const jsonValue = JSON.parse(value);
		return c.json(jsonValue);
	} catch (e) {
		return c.json({ message: 'Invalid JSON stored' }, 500);
	}
});
```

- Retrieves a value from KV storage by the key.
- If not found, returns 404.
- If the value exists but is not valid JSON, returns a 500 error.
- Otherwise, returns the parsed JSON.

---

### POST `/item/:key`

```js
app.post('/item/:key', async (c) => {
	const key = c.req.param('key');
	const body = await c.req.json();
	await c.env.store1.put(key, JSON.stringify(body));
	return c.json({ message: 'Created' }, 201);
});
```

- Creates a new item (or overwrites an existing one) in KV at the specified key.
- Stores the body as a JSON string.
- Returns 201 Created.

---

### PUT `/item/:key`

```js
app.put('/item/:key', async (c) => {
	const key = c.req.param('key');
	const body = await c.req.json();
	await c.env.store1.put(key, JSON.stringify(body));
	return c.json({ message: 'Updated' }, 200);
});
```

- Same as `POST`, but semantically used to update an existing item.
- You might consider checking if the item exists before updating (if needed for stricter REST semantics).

---

### DELETE `/item/:key`

```js
app.delete('/item/:key', async (c) => {
	const key = c.req.param('key');
	await c.env.store1.delete(key);
	return c.json({ message: 'Deleted' }, 200);
});
```

- Deletes the item with the given key.
- Always returns 200 (even if the key didn't exist).

---

### GET `/items`

```js
app.get('/items', async (c) => {
	const list = await c.env.store1.list();
	const result = {};

	for (const key of list.keys) {
		const value = await c.env.store1.get(key.name);
		if (value !== null) {
			try {
				result[key.name] = JSON.parse(value);
			} catch (e) {
				result[key.name] = { message: 'Invalid JSON stored' };
			}
		}
	}

	return c.json(result);
});
```

- Lists all keys in the KV namespace (`store1`) — by default, this can return up to 1000.
- For each key:
  - Fetches its value.
  - Tries to parse it as JSON.
  - Adds it to a result object.
- Returns all key-value pairs as one large JSON object.

---

To use your Hono API from the frontend (e.g. a browser), you can call it using JavaScript’s `fetch()` function. Here's how you can interact with each endpoint:


## Base URL

Assuming your Worker is deployed at:
https://app0.muchagorou112.workers.dev



## GET `/item/:key`

### Example: Get item with key `note1`

```js
fetch('https://app0.muchagorou112.workers.dev/item/note1')
  .then(res => res.json())
  .then(data => console.log(data));
```

## POST `/item/:key`

### Example: Create item with key `note1`

```js
fetch('https://app0.muchagorou112.workers.dev/item/note1', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({ title: 'My Note', content: 'Hello world' })
})
.then(res => res.json())
.then(data => console.log(data));
```

## PUT `/item/:key`

### Example: Update item with key `note1`

```js
fetch('https://app0.muchagorou112.workers.dev/item/note1', {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({ title: 'Updated Note', content: 'Updated content' })
})
.then(res => res.json())
.then(data => console.log(data));
```

## DELETE `/item/:key`

### Example: Delete item with key `note1`

```js
fetch('https://app0.muchagorou112.workers.dev/item/note1', {
  method: 'DELETE'
})
.then(res => res.json())
.then(data => console.log(data));
```

## GET `/items`

### Example: Get all items (max 1000)

```js
fetch('https://app0.muchagorou112.workers.dev/items')
  .then(res => res.json())
  .then(data => console.log(data));
```

