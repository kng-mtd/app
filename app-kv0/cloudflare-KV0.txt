Cloudflare KV „Çí‰Ωø„Å£„Åü To-Do List „Ç¢„Éó„É™

### **ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ**
- **„Éá„Éº„Çø„Çπ„Éà„Ç¢**: Cloudflare KVÔºà„Ç≠„Éº„Éª„Éê„É™„É•„Éº„Çπ„Éà„Ç¢Ôºâ
- **„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ**: alpine.js+HTMLÔºà„Ç∑„É≥„Éó„É´„Å™ÊßãÊàêÔºâ
- **„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ**: Cloudflare WorkersÔºàAPI „Çµ„Éº„Éê„ÉºÔºâ
- **„Éá„Éó„É≠„Ç§**: GitHub PagesÔºà„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÔºâ„ÄÅCloudflare WorkersÔºàAPIÔºâ

### **Ê©üËÉΩ**
1. **„Çø„Çπ„ÇØ„ÅÆËøΩÂä†**
2. **„Çø„Çπ„ÇØ„ÅÆÂèñÂæó**
3. **„Çø„Çπ„ÇØ„ÅÆÂâäÈô§**
4. **„Çø„Çπ„ÇØ„ÅÆÂÆå‰∫Ü„Éû„Éº„ÇØ**

### **Â§ß„Åæ„Åã„Å™ÂÆüË£ÖÊñπÈáù**
1. **Cloudflare Workers** „Åß API „Çí‰ΩúÊàêÔºàKV „ÇíÊìç‰Ωú„Åô„ÇãÔºâ
2. **htmx** „Çí‰Ωø„Å£„Å¶„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÇíÊßãÁØâ
3. **GitHub Pages** „Å´„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Çí„Éá„Éó„É≠„Ç§„Åó„ÄÅCloudflare Workers „ÅÆ API „Å®ÈÄ£Êê∫




Cloudflare KVÔºàKey-Value StorageÔºâ„ÅÆ‰∏ªË¶Å„Å™ **„Éó„É≠„Éë„ÉÜ„Ç£„Å®„É°„ÇΩ„ÉÉ„Éâ** 

## ** KV„ÅÆ‰∏ªË¶Å„É°„ÇΩ„ÉÉ„Éâ**
Cloudflare Workers „ÅÆ `env.MY_KV` „Å´ÂØæ„Åó„Å¶Âëº„Å≥Âá∫„Åõ„Çã„É°„ÇΩ„ÉÉ„Éâ„ÅØ‰ª•‰∏ã„ÅÆÈÄö„Çä„Åß„Åô„ÄÇ

### **„Éá„Éº„Çø„Çí‰øùÂ≠òÔºàputÔºâ**
```javascript
await env.MY_KV.put("key", "value");
```
**„Ç≠„Éº (`"key"`) „Å´ `"value"` „Çí‰øùÂ≠ò**  
**„Åô„Åß„Å´„Ç≠„Éº„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØ‰∏äÊõ∏„Åç**  

#### **„Ç™„Éó„Ç∑„Éß„É≥‰ªò„Åç„ÅÆ‰øùÂ≠ò**
```javascript
await env.MY_KV.put("session:12345", "user_data", {
  expiration: 1710000000, // Unix„Çø„Ç§„É†„Çπ„Çø„É≥„ÉóÔºàÁßíÂçò‰ΩçÔºâ
  expirationTtl: 3600,    // 1ÊôÇÈñìÔºàTTLÔºâ
});
```
**`expiration`** ‚Üí ÊåáÂÆö„Åó„Åü Unix „Çø„Ç§„É†ÔºàÁßíÂçò‰ΩçÔºâ„Å´„Éá„Éº„Çø„ÅåÂâäÈô§„Åï„Çå„Çã  
**`expirationTtl`** ‚Üí „Äá„ÄáÁßíÂæå„Å´„Éá„Éº„Çø„ÅåÂâäÈô§„Åï„Çå„Çã  

---

### **„Éá„Éº„Çø„ÇíÂèñÂæóÔºàgetÔºâ**
```javascript
const value = await env.MY_KV.get("key");
console.log(value);
```
**„Ç≠„Éº `"key"` „Å´‰øùÂ≠ò„Åï„Çå„Åü„Éá„Éº„Çø„ÇíÂèñÂæó**  
**„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ `null` „ÇíËøî„Åô**  

#### **JSON„Éá„Éº„Çø„ÅÆÂèñÂæó**
```javascript
const value = await env.MY_KV.get("user:123", { type: "json" });
console.log(value.name); // JSON„Å®„Åó„Å¶Êâ±„Åà„Çã
```
`{ type: "json" }` „ÇíÊåáÂÆö„Åô„Çã„Å® `JSON.parse()` „Åó„Å™„Åè„Å¶„ÇÇOK  

#### **„Éê„Ç§„Éä„É™„Éá„Éº„Çø„ÅÆÂèñÂæó**
```javascript
const binaryData = await env.MY_KV.get("image:123", { type: "arrayBuffer" });
const uint8Array = new Uint8Array(binaryData);
```
`type: "arrayBuffer"` „ÇíÊåáÂÆö„Åô„Çã„Å® **„Éê„Ç§„Éä„É™„Éá„Éº„Çø„Å®„Åó„Å¶ÂèñÂæó** „Åß„Åç„Çã  

---

### **„Éá„Éº„Çø„ÇíÂâäÈô§ÔºàdeleteÔºâ**
```javascript
await env.MY_KV.delete("key");
```
`"key"` „Å´‰øùÂ≠ò„Åï„Çå„Åü„Éá„Éº„Çø„ÇíÂâäÈô§  

---

### **„Ç≠„Éº„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæóÔºàlistÔºâ**
```javascript
const keys = await env.MY_KV.list();
console.log(keys.keys);
```
**KV„Å´‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Çã„Ç≠„Éº„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó**  
`keys` „Å´„Ç≠„Éº„ÅÆÈÖçÂàó„ÅåÂê´„Åæ„Çå„Çã  

#### **ÁâπÂÆö„ÅÆ„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„ÇπÔºàÊé•È†≠ËæûÔºâ„ÇíÊåáÂÆö**
```javascript
const keys = await env.MY_KV.list({ prefix: "session:" });
console.log(keys.keys);
```
`"session:"` „ÅßÂßã„Åæ„Çã„Ç≠„Éº„Å†„Åë„ÇíÂèñÂæó  

---


ÔΩÄ
cloudflare worker

index.js

import { Hono } from 'hono';
import { cors } from 'hono/cors';

const app = new Hono();

// Enable CORS for all routes
app.use('*', cors());

// Handle GET request to fetch a JSON value by key
app.get('/item/:key', async (c) => {
	const key = c.req.param('key');
	const value = await c.env.store1.get(key);
	if (value === null) {
		return c.json({ message: 'Not Found' }, 404);
	}
	try {
		const jsonValue = JSON.parse(value);
		return c.json(jsonValue);
	} catch (e) {
		return c.json({ message: 'Invalid JSON stored' }, 500);
	}
});

// Handle POST request to create a new JSON item
app.post('/item/:key', async (c) => {
	const key = c.req.param('key');
	const body = await c.req.json();
	await c.env.store1.put(key, JSON.stringify(body));
	return c.json({ message: 'Created' }, 201);
});

// Handle PUT request to update an existing JSON item
app.put('/item/:key', async (c) => {
	const key = c.req.param('key');
	const body = await c.req.json();
	await c.env.store1.put(key, JSON.stringify(body));
	return c.json({ message: 'Updated' }, 200);
});

// Handle DELETE request to delete an item
app.delete('/item/:key', async (c) => {
	const key = c.req.param('key');
	await c.env.store1.delete(key);
	return c.json({ message: 'Deleted' }, 200);
});

// Handle GET request to fetch all JSON key-value pairs(max 1000 items)
app.get('/items', async (c) => {
	const list = await c.env.store1.list();
	const result = {};

	for (const key of list.keys) {
		const value = await c.env.store1.get(key.name);
		if (value !== null) {
			try {
				result[key.name] = JSON.parse(value);
			} catch (e) {
				result[key.name] = { message: 'Invalid JSON stored' };
			}
		}
	}

	return c.json(result);
});

export default app;

---



„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ

index.html

<!DOCTYPE html>
<html lang="en" x-data="{ dark: false }" :class="{ 'dark': dark }">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Todo List</title>
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic" />
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/milligram/1.4.1/milligram.css" />
		<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
		<style>
			body.dark {
				background: #000;
			}
			.button-small {
				font-size: 1rem;
				height: 2rem;
				line-height: 2rem;
				padding: 0 1rem;
			}
		</style>
	</head>
	<body class="container" x-data="{ dark: false }" :class="{ 'dark': dark }">
		<h1>
			Todo List
			<button class="button-small" @click="dark = !dark" x-text="dark ? '‚òÄÔ∏è' : 'üåô'"></button>
		</h1>

		<form id="todo-form">
			<input type="text" id="new-todo" placeholder="Enter new todo" required style="color: #888" />
		</form>

		<ul id="todo-list"></ul>

		<script>
			//const API_URL = 'http://localhost:8787';
			const API_URL = 'https://kv-app0.muchagorou112.workers.dev';

			const fetchTodos = async () => {
				const res = await fetch(`${API_URL}/items`);
				const data = await res.json();
				const list = document.getElementById('todo-list');
				list.innerHTML = '';

				Object.entries(data)
					.sort(([, a], [, b]) => new Date(a.updatedAt) - new Date(b.updatedAt))
					.forEach(([key, todo]) => {
						list.innerHTML += `
            <li>
              <input type="checkbox" ${todo.done ? 'checked' : ''} onchange="toggleDone('${key}', ${!todo.done})">
              <span>${todo.title}</span>
              <small>(Updated: ${new Date(todo.updatedAt).toLocaleString()})</small>
              <button class="button-small" onclick="deleteTodo('${key}')">Del</button>
            </li>`;
					});
			};

			const addTodo = async (title) => {
				const key = crypto.randomUUID();
				const now = new Date().toISOString();
				await fetch(`${API_URL}/item/${key}`, {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ title, done: false, updatedAt: now }),
				});
				//fetchTodos();
			};

			const toggleDone = async (key, done) => {
				const todo = await (await fetch(`${API_URL}/item/${key}`)).json();
				todo.done = done;
				todo.updatedAt = new Date().toISOString();
				await fetch(`${API_URL}/item/${key}`, {
					method: 'PUT',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify(todo),
				});
				fetchTodos();
			};

			const deleteTodo = async (key) => {
				await fetch(`${API_URL}/item/${key}`, { method: 'DELETE' });
				fetchTodos();
			};

			document.getElementById('todo-form').addEventListener('submit', async (e) => {
				e.preventDefault();
				const input = document.getElementById('new-todo');
				if (input.value.trim()) {
					await addTodo(input.value.trim());
					input.value = '';
				}
			});

			fetchTodos();
			setInterval(fetchTodos, 5000);
		</script>
	</body>
</html>


GitHub Pages „Å´ HTML „Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ

„Ç¢„ÇØ„Çª„Çπ
https://kng-mtd.github.io/app/app-kv0/index.html











