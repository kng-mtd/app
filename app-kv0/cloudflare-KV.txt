Cloudflare KV を使った To-Do List アプリを作る場合、以下のような構成が考えられます。

### **技術スタック**
- **データストア**: Cloudflare KV（キー・バリューストア）
- **フロントエンド**: htmx + HTML（シンプルな構成）
- **バックエンド**: Cloudflare Workers（API サーバー）
- **デプロイ**: GitHub Pages（フロントエンド）、Cloudflare Workers（API）

### **機能**
1. **タスクの追加**
2. **タスクの取得**
3. **タスクの削除**
4. **タスクの完了マーク**

### **大まかな実装方針**
1. **Cloudflare Workers** で API を作成（KV を操作する）
2. **htmx** を使ってフロントエンドを構築
3. **GitHub Pages** にフロントエンドをデプロイし、Cloudflare Workers の API と連携



cd ~
(npm install -g wrangler)
(npm update -g wrangler)
wrangler --version
wrangler login

mkdir kv-app0
wrangler init kv-app0

cd kv-app0
code .



Cloudflare Dashboard → KV
新しいネームスペースを作成（例: `todo`）
kv id発行 ---  

`wrangler.jsonc` に KV の設定を追加:

{
	"$schema": "node_modules/wrangler/config-schema.json",
	"name": "kv-app0",
	"main": "src/index.js",
	"compatibility_date": "2025-03-13",
	"observability": {
		"enabled": true
	},
	"kv_namespaces": [
		{
			"binding": "todo",
			"id": "---"
		}
	]
}


wrangler kv namespace list




### **Cloudflare Workers のコード**

index.js

export default {
  async fetch(req, env) {
    const url = new URL(req.url);
    if (url.pathname === "/todos") {
      if (req.method === "GET") return getTodos(env);
      if (req.method === "POST") return addTodo(req, env);
    }
    if (url.pathname.startsWith("/todos/")) {
      const id = url.pathname.split("/").pop();
      if (req.method === "DELETE") return deleteTodo(id, env);
      if (req.method === "PUT") return toggleTodo(id, req, env);
    }
    return new Response("Not Found", { status: 404 });
  },
};

// 📌 すべてのタスクを取得 (GET /todos)
async function getTodos(env) {
  const keys = await env.todo.list();
  const todos = await Promise.all(keys.keys.map(k => env.todo.get(k.name, "json")));
  return new Response(JSON.stringify(todos), { headers: { "Content-Type": "application/json" } });
}

// 📌 新しいタスクを追加 (POST /todos)
async function addTodo(req, env) {
  const { title } = await req.json();
  if (!title) return new Response("Title is required", { status: 400 });

  const id = crypto.randomUUID();
  const todo = { id, title, done: false, createdAt: new Date().toISOString() };
  await env.todo.put(id, JSON.stringify(todo));

  return new Response(JSON.stringify(todo), { headers: { "Content-Type": "application/json" } });
}

// 📌 タスクを削除 (DELETE /todos/{id})
async function deleteTodo(id, env) {
  const existing = await env.todo.get(id);
  if (!existing) return new Response("Not Found", { status: 404 });

  await env.todo.delete(id);
  return new Response("Deleted", { status: 200 });
}

// 📌 タスクの完了/未完了を切り替え (PUT /todos/{id})
async function toggleTodo(id, req, env) {
  const existing = await env.todo.get(id, "json");
  if (!existing) return new Response("Not Found", { status: 404 });

  const updatedTodo = { ...existing, done: !existing.done };
  await env.todo.put(id, JSON.stringify(updatedTodo));

  return new Response(JSON.stringify(updatedTodo), { headers: { "Content-Type": "application/json" } });
}


このコードは、Cloudflare KV を利用した **シンプルな To-Do リスト API** を提供します。  
エンドポイントごとに **GET（取得）・POST（追加）・DELETE（削除）・PUT（更新）** を実装しています。

---

# **📌 コードの概要**
### **1. ルートの処理**
```javascript
export default {
  async fetch(req, env) {
    const url = new URL(req.url);

    if (url.pathname === "/todos") {
      if (req.method === "GET") return getTodos(env);
      if (req.method === "POST") return addTodo(req, env);
    }

    if (url.pathname.startsWith("/todos/")) {
      const id = url.pathname.split("/").pop();
      if (req.method === "DELETE") return deleteTodo(id, env);
      if (req.method === "PUT") return toggleTodo(id, req, env);
    }

    return new Response("Not Found", { status: 404 });
  },
};
```
🔹 **`fetch` メソッド** は、リクエストの URL とメソッドを判定して適切な関数を呼び出します。  
🔹 `env.todo` は Cloudflare KV の名前空間です。

| **HTTP メソッド** | **パス**          | **処理** |
|------------------|------------------|-------------------------|
| `GET`           | `/todos`          | すべてのタスクを取得 |
| `POST`          | `/todos`          | 新しいタスクを追加 |
| `DELETE`        | `/todos/{id}`     | タスクを削除 |
| `PUT`           | `/todos/{id}`     | タスクの完了状態を切り替え |

---

# **📌 各エンドポイントの処理**
## **2. すべてのタスクを取得 (`GET /todos`)**
```javascript
async function getTodos(env) {
  const keys = await env.todo.list();
  const todos = await Promise.all(keys.keys.map(k => env.todo.get(k.name, "json")));
  return new Response(JSON.stringify(todos), { headers: { "Content-Type": "application/json" } });
}
```
🔹 **`env.todo.list()`** で KV に保存されているすべてのキー（ID）を取得  
🔹 **`env.todo.get(k.name, "json")`** で ID に紐づくタスクを取得  
🔹 **`Promise.all()`** で並列処理し、すべてのタスクを JSON として返す

📌 **レスポンスの例**
```json
[
  { "id": "123", "title": "買い物に行く", "done": false },
  { "id": "456", "title": "勉強する", "done": true }
]
```

---

## **3. 新しいタスクを追加 (`POST /todos`)**
```javascript
async function addTodo(req, env) {
  const { title } = await req.json();
  if (!title) return new Response("Title is required", { status: 400 });

  const id = crypto.randomUUID();
  const todo = { id, title, done: false, createdAt: new Date().toISOString() };
  await env.todo.put(id, JSON.stringify(todo));

  return new Response(JSON.stringify(todo), { headers: { "Content-Type": "application/json" } });
}
```
🔹 `title` をリクエストボディから取得（必須チェックあり）  
🔹 **UUID（`crypto.randomUUID()`）で一意の ID を生成**  
🔹 **作成日時 (`createdAt`) を保存**  
🔹 KV に **`id` をキーとして JSON データを保存**  

📌 **リクエスト**
```json
{ "title": "読書する" }
```
📌 **レスポンス**
```json
{
  "id": "789",
  "title": "読書する",
  "done": false,
  "createdAt": "2025-03-18T12:00:00.000Z"
}
```

---

## **4. タスクを削除 (`DELETE /todos/{id}`)**
```javascript
async function deleteTodo(id, env) {
  const existing = await env.todo.get(id);
  if (!existing) return new Response("Not Found", { status: 404 });

  await env.todo.delete(id);
  return new Response("Deleted", { status: 200 });
}
```
🔹 **`env.todo.get(id)` でタスクが存在するかチェック**  
🔹 存在しない場合は **404 Not Found** を返す  
🔹 **`env.todo.delete(id)` で削除**  

📌 **リクエスト**
```http
DELETE /todos/789
```
📌 **レスポンス**
```
Deleted
```

---

## **5. タスクの完了/未完了を切り替え (`PUT /todos/{id}`)**
```javascript
async function toggleTodo(id, req, env) {
  const existing = await env.todo.get(id, "json");
  if (!existing) return new Response("Not Found", { status: 404 });

  const updatedTodo = { ...existing, done: !existing.done };
  await env.todo.put(id, JSON.stringify(updatedTodo));

  return new Response(JSON.stringify(updatedTodo), { headers: { "Content-Type": "application/json" } });
}
```
🔹 **タスクが存在するかチェック**  
🔹 `done` を **`true ⇄ false` にトグル（切り替え）**  
🔹 更新したデータを KV に保存し、レスポンスとして返す  

📌 **リクエスト**
```http
PUT /todos/789
```
📌 **変更前**
```json
{ "id": "789", "title": "読書する", "done": false }
```
📌 **変更後**
```json
{ "id": "789", "title": "読書する", "done": true }
```

---



API のテスト

## **1. サーバーの起動**
まず、Cloudflare Workers の開発サーバーを起動します。

```sh
npx wrangler dev
```

これで、`http://localhost:8787` で API が実行されます。

---

## **2. API の動作確認**

open new terminal

### **すべてのタスクを取得**
```sh
curl -X GET http://localhost:8787/todos
```
**期待されるレスポンス**
```json
[]
```

---

### **新しいタスクを追加**
```sh
curl -X POST http://localhost:8787/todos \
     -H "Content-Type: application/json" \
     -d '{"title": "Buy groceries"}'
```
**期待されるレスポンス**
```json
{
  "id": "1234-5678-9012",
  "title": "Buy groceries",
  "done": false,
  "createdAt": "2025-03-18T12:34:56.789Z"
}
```
**レスポンスの `id` は UUID で異なる**

---

### **タスクを削除**
ID を確認し、削除を実行します。

```sh
curl -X DELETE http://localhost:8787/todos/1234-5678-9012
```
**期待されるレスポンス**
```
Deleted
```

---

### **タスクの完了/未完了を切り替え**
```sh
curl -X PUT http://localhost:8787/todos/1234-5678-9012
```
**期待されるレスポンス**
```json
{
  "id": "1234-5678-9012",
  "title": "Buy groceries",
  "done": true,
  "createdAt": "2025-03-18T12:34:56.789Z"
}
```

---

### **エラーハンドリングの確認**
#### **タイトルが空のタスクを追加**
```sh
curl -X POST http://localhost:8787/todos \
     -H "Content-Type: application/json" \
     -d '{}'
```
**期待されるレスポンス**
```
Title is required
```
**ステータスコード:** `400`

#### **存在しないタスクを削除**
```sh
curl -X DELETE http://localhost:8787/todos/nonexistent-id
```
**期待されるレスポンス**
```
Not Found
```
**ステータスコード:** `404`

---



cloudflare walkersへデプロイ

wrangler deploy

デプロイ後の **本番 URL** (`https://your-worker-url`) を使用します。

```sh
curl -X GET https://your-worker-url/todos
```

---



CORS (Cross-Origin Resource Sharing) のエラーは、サーバー側で適切な `Access-Control-Allow-Origin` ヘッダーを設定することで解決できます。

---

## **🔧 解決策**
サーバー側 (`index.js`) に CORS ヘッダーを追加しましょう。

### **1. 共通の CORS ヘッダー関数を作成**
```javascript
function corsHeaders() {
  return {
    "Access-Control-Allow-Origin": "*", // すべてのオリジンからのリクエストを許可
    "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS", // 許可する HTTP メソッド
    "Access-Control-Allow-Headers": "Content-Type", // 許可するヘッダー
  };
}
```

---

### **2. `fetch` 内で CORS に対応**
```javascript
export default {
  async fetch(req, env) {
    const url = new URL(req.url);

    // CORS プリフライトリクエスト (OPTIONS) に対応
    if (req.method === "OPTIONS") {
      return new Response(null, { headers: corsHeaders() });
    }

    if (url.pathname === "/todos") {
      if (req.method === "GET") return getTodos(env);
      if (req.method === "POST") return addTodo(req, env);
    }

    if (url.pathname.startsWith("/todos/")) {
      const id = url.pathname.split("/").pop();
      if (req.method === "DELETE") return deleteTodo(id, env);
      if (req.method === "PUT") return toggleTodo(id, req, env);
    }

    return new Response("Not Found", { status: 404, headers: corsHeaders() });
  },
};
```

---

### **3. API のレスポンスに CORS ヘッダーを追加**
各 API 関数の `Response` に `headers: corsHeaders()` を追加します。

```javascript
async function getTodos(env) {
  const keys = await env.todo.list();
  const todos = await Promise.all(keys.keys.map(k => env.todo.get(k.name, "json")));
  return new Response(JSON.stringify(todos), { headers: { ...corsHeaders(), "Content-Type": "application/json" } });
}

async function addTodo(req, env) {
  const { title } = await req.json();
  if (!title) return new Response("Title is required", { status: 400, headers: corsHeaders() });

  const id = crypto.randomUUID();
  const todo = { id, title, done: false, createdAt: new Date().toISOString() };
  await env.todo.put(id, JSON.stringify(todo));

  return new Response(JSON.stringify(todo), { headers: { ...corsHeaders(), "Content-Type": "application/json" } });
}

async function deleteTodo(id, env) {
  const existing = await env.todo.get(id);
  if (!existing) return new Response("Not Found", { status: 404, headers: corsHeaders() });

  await env.todo.delete(id);
  return new Response("Deleted", { status: 200, headers: corsHeaders() });
}

async function toggleTodo(id, req, env) {
  const existing = await env.todo.get(id, "json");
  if (!existing) return new Response("Not Found", { status: 404, headers: corsHeaders() });

  const updatedTodo = { ...existing, done: !existing.done };
  await env.todo.put(id, JSON.stringify(updatedTodo));

  return new Response(JSON.stringify(updatedTodo), { headers: { ...corsHeaders(), "Content-Type": "application/json" } });
}
```

---



フロントエンド

index.html

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>To-Do List</title>
		<style>
			body {
				font-family: Arial, sans-serif;
				max-width: 400px;
				margin: 20px auto;
			}
			ul {
				list-style: none;
				padding: 0;
			}
			li {
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 8px;
				border-bottom: 1px solid #ddd;
			}
			button {
				margin-left: 10px;
				cursor: pointer;
			}
		</style>
	</head>
	<body>
		<h2>To-Do List</h2>

		<!-- Task input form -->
		<form id="todo-form">
			<input type="text" id="todo-title" name="title" placeholder="New task" required />
			<button type="submit">Add</button>
		</form>

		<!-- Task list -->
		<ul id="todo-list"></ul>

		<script>
			const url = 'https://kv-app0.muchagorou112.workers.dev';
			const todoForm = document.getElementById('todo-form');
			const todoList = document.getElementById('todo-list');

			// Load tasks when the page loads
			async function loadTodos() {
				const response = await fetch(`${url}/todos`);
				const todos = await response.json();
				renderTodos(todos);
			}

			// Render the task list
			function renderTodos(todos) {
				console.log('Rendering todos:', todos); // Debug log
				todoList.innerHTML = ''; // Clear the list
				todos.forEach((todo) => {
					const li = document.createElement('li');
					li.dataset.id = todo.id;
					li.innerHTML = `
                    <span>${todo.done ? '✅' : '⬜'} ${todo.title}</span>
                    <button onclick="toggleTodoStatus('${todo.id}')">Toggle</button>
                    <button onclick="deleteTodo('${todo.id}')">Delete</button>
                	`;
					todoList.appendChild(li);
				});
			}

			// Add a new task
			todoForm.addEventListener('submit', async (event) => {
				event.preventDefault();
				const title = document.getElementById('todo-title').value;
				const response = await fetch(`${url}/todos`, {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ title }),
				});
				// const newTodo = await response.json();
				loadTodos(); // Reload task list
				todoForm.reset();
			});

			// Toggle task completion status
			async function toggleTodoStatus(id) {
				const response = await fetch(`${url}/todos/${id}`, {
					method: 'PUT',
				});
				const updatedTodo = await response.json();
				loadTodos(); // Reload task list
			}

			// Delete a task
			async function deleteTodo(id) {
				const response = await fetch(`${url}/todos/${id}`, {
					method: 'DELETE',
				});
				loadTodos(); // Reload task list
			}

			// Load tasks on page load
			loadTodos();
		</script>
	</body>
</html>


GitHub Pages に HTML をアップロード



htmx を使用したシンプルなフロントエンドのコードを作成しました。  
Cloudflare KV を利用した To-Do リストのフロントエンドです。  

- **機能**  
  - タスクの取得 (`GET /todos`)  
  - タスクの追加 (`POST /todos`)  
  - タスクの削除 (`DELETE /todos/{id}`)  
  - タスクの完了/未完了を切り替え (`PUT /todos/{id}`)  

---

### **`index.html`**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List</title>
    <script src="https://unpkg.com/htmx.org@1.9.6"></script>
    <style>
        body { font-family: Arial, sans-serif; max-width: 400px; margin: 20px auto; }
        ul { list-style: none; padding: 0; }
        li { display: flex; justify-content: space-between; align-items: center; padding: 8px; border-bottom: 1px solid #ddd; }
        button { margin-left: 10px; cursor: pointer; }
    </style>
</head>
<body>
    <h2>To-Do List</h2>

    <!-- タスク追加フォーム -->
    <form hx-post="/todos" hx-trigger="submit" hx-target="#todo-list" hx-swap="outerHTML">
        <input type="text" name="title" placeholder="New task" required>
        <button type="submit">Add</button>
    </form>

    <!-- タスクリスト -->
    <ul id="todo-list" hx-get="/todos" hx-trigger="load" hx-swap="outerHTML"></ul>

</body>
</html>
```

---

### **サーバーのレスポンスを処理するエンドポイント**
Cloudflare Workers の `fetch` メソッドから返す HTML は次のように構成します。

#### **`getTodos` のレスポンス**
```javascript
async function getTodos(env) {
  const keys = await env.todo.list();
  const todos = await Promise.all(keys.keys.map(k => env.todo.get(k.name, "json")));

  // HTML を返す
  const html = `<ul id="todo-list">
    ${todos.map(todo => `
      <li>
        <span>${todo.done ? "✅" : "⬜"} ${todo.title}</span>
        <button hx-put="/todos/${todo.id}" hx-trigger="click" hx-target="#todo-list" hx-swap="outerHTML">
          Toggle
        </button>
        <button hx-delete="/todos/${todo.id}" hx-trigger="click" hx-target="#todo-list" hx-swap="outerHTML">
          Delete
        </button>
      </li>
    `).join("")}
  </ul>`;

  return new Response(html, { headers: { "Content-Type": "text/html" } });
}
```

---

### **ポイント**
- **htmx を活用**  
  - `hx-get="/todos" hx-trigger="load"` で、ページ読み込み時にタスクリストを取得  
  - `hx-post="/todos"` で、新しいタスクを追加後、自動でリストを更新  
  - `hx-delete="/todos/{id}"` で、タスク削除時にリストを更新  
  - `hx-put="/todos/{id}"` で、完了/未完了を切り替え  

- **サーバーから HTML を返す**  
  - `getTodos` は HTML のリストを生成し、直接返す  
  - JavaScript を書かずに、htmx で動的に更新  










